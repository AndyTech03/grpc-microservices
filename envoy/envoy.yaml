admin:
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901
  access_log_path: "/dev/stdout"

static_resources:
  listeners:
    - name: main_listener
      address:
        socket_address: 
          address: 0.0.0.0
          port_value: 8080
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO  # Поддержка HTTP/1.1 и HTTP/2
                stat_prefix: ingress
                
                # 1. Настройка маршрутов для разных proto-сервисов
                route_config:
                  name: main_routes
                  virtual_hosts:
                    - name: services
                      domains: ["*"]
                      routes:
                        # Маршрут для auth_service
                        - match:
                            prefix: "/auth.AuthService/"
                          route:
                            cluster: auth_service

                        # Маршрут для users_service
                        - match:
                            prefix: "/users.UsersService/"
                          route:
                            cluster: users_service
                        
                        # Маршрут для posts_service
                        - match:
                            prefix: "/posts.PostsService/"
                          route:
                            cluster: posts_service
                
                # 2. REST → gRPC трансляция 3.Генерация UUID и 4. Аутентификация через auth-сервис
                http_filters:
                  - name: envoy.filters.http.grpc_json_transcoder
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder
                      proto_descriptor: "/etc/envoy/proto.pb"
                      services: 
                        - "auth.AuthService"
                        - "posts.PostsService"
                        - "users.UsersService"
                      auto_mapping: true

                  # - name: envoy.filters.http.ext_authz
                  #   typed_config:
                  #     "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                  #     transport_api_version: V3
                  #     grpc_service:
                  #       envoy_grpc:
                  #         cluster_name: auth_service
                  #       timeout: 1s
                  #     failure_mode_allow: false  # Блокировать при ошибках аутентификации
                  #     with_request_body:
                  #       max_request_bytes: 4096

                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      inline_code: |
                        function envoy_on_request(request_handle)
                          -- Генерируем UUID для всех запросов
                          local uuid = string.gsub("xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx", "[xy]", function(c)
                            local v = (c == "x") and math.random(0, 15) or math.random(8, 11)
                            return string.format("%x", v)
                          end)
                          
                          -- Добавляем UUID в заголовки
                          request_handle:headers():add("x-request-id", uuid)
                          
                          -- Добавляем userLogin из метаданных ext_authz
                          local metadata = request_handle:streamInfo():dynamicMetadata():get("envoy.filters.http.ext_authz")
                          if metadata and metadata.userLogin then
                            request_handle:headers():add("x-user-id", metadata.userLogin)
                          end
                        end

                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                  
  clusters:
    - name: auth_service
      connect_timeout: 1s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      load_assignment:
        cluster_name: auth_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: auth-service
                      port_value: 50051

    - name: posts_service
      connect_timeout: 1s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      load_assignment:
        cluster_name: posts_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: posts-service
                      port_value: 50052

    - name: users_service
      connect_timeout: 1s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      load_assignment:
        cluster_name: users_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: users-service
                      port_value: 50053
